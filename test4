# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: gtraiman <gtraiman@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/07/11 16:45:54 by gtraiman          #+#    #+#              #
#    Updated: 2024/10/19 20:53:19 by gtraiman         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

NAME        = minishell
AR          = ar rcs
CC          = gcc
CFLAGS      = -Wall -Wextra -Werror -I . -I./libft -g3

PATH_LIBFT  = libft
LIBFT       = ${PATH_LIBFT}/libft.a

# Chemins pour readline (ajuste-les selon ton installation)
READLINE    = -L/opt/homebrew/opt/readline/lib -I/opt/homebrew/opt/readline/include -lreadline

# Sources des fichiers
SRCS        =   exec/builtins/cd.c \
                exec/builtins/echo.c \
                exec/builtins/env.c \
                exec/builtins/exit.c \
                exec/builtins/export.c \
                exec/builtins/pwd.c \
                exec/builtins/unset.c \
                exec/builtins/builtins_utils.c \
                exec/exec.c \
                exec/envp_var.c \
                exec/heredoc.c \
                exec/pipe.c \
                exec/redirections.c \
                exec/exec_utils.c \
                main.c \
                parsing/parsing_tokenizer.c \
                parsing/parsing_quotes.c \
                parsing/parsing_expansion.c \
                parsing/parsing_redirections.c \
                parsing/parsing_pipes.c \
                parsing/parsing_syntax.c \
                parsing/parsing_utils.c \
                parsing/parsing_memory.c \
                parsing/parsing_display.c \
                parsing/parser_commands.c \

OBJS        = ${SRCS:.c=.o}

all: ${LIBFT} ${NAME}

%.o: %.c
	${CC} ${CFLAGS} -c $< -o $@

${NAME}: ${OBJS}
	$(CC) ${CFLAGS} -o $(NAME) ${OBJS} ${LIBFT} ${READLINE}

${LIBFT}:
	${MAKE} -C ${PATH_LIBFT} > /dev/null

clean:
	rm -f ${OBJS}
	${MAKE} -C ${PATH_LIBFT} clean > /dev/null

fclean: clean
	rm -f ${NAME}
	${MAKE} -C ${PATH_LIBFT} fclean > /dev/null

re: fclean all

.PHONY: all clean fclean re
#include "minishell.h"
#include <readline/history.h>
#include <readline/readline.h>

int g_last_exit_status = 0;

int main(int argc, char **argv, char **envp)
{
    char        *input;
    t_token     *tokens;
    t_cmd_list  *cmd_list;
    t_data      data;

    data.ac = argc;
    data.av = ft_copytab(argv);
    data.envp = ft_copytab(envp);
    data.cwd = malloc(4096);
    data.exit = 0;
    getcwd(data.cwd, 1024);

    while (1)
    {
        input = readline("minishell$ ");
        if (!input)
            break;
        if (*input)
            add_history(input);

        tokens = tokenize_input(input);
        free(input);

        printf("Tokens générés : \n");
        print_tokens(tokens);
        if (check_syntax(tokens) == 0)
        {
            cmd_list = parse_commands(tokens);
            if (!cmd_list)
            {
                free_tokens(tokens);
                continue; // Ou gérez l'erreur selon vos besoins
            }
            // ft_exec(cmd_list, &data);
            // free_cmd_list(cmd_list); --> Je suis censé free command mais ça bloque quand je free
        }
        free_tokens(tokens);
    }

    // Libérer la mémoire avant de quitter
    ft_freetab(data.av);
    ft_freetab(data.envp);
    free(data.cwd);

    return 0;
}
